What happens when you initialize a repository? Why do you need to do it?
.git fil is created in the directory and it store every change or commit i create in it 

How is the staging area different from the working directory and the repository? What value do you think it offers?
the staging are is an intermediate area between working directory and repository and it let me add commits in the repsository by more control by allowing me to specify what exactly changes should be commited 
i can add files one at a time to the staging area

How can you use the staging area to make sure you have one commit per logical change?
cause is staging is doing add one at a time it is easier to do it 1 commit/logical change 
i can always use git diff to compare stage area and working directory to see the last changes i have done and then commit them 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
it's helpful if u want to move on diffrent piece of work or  add something i want to use in some situations but not always or not a standard update maybe for test maybe for other purpose so it is helpful to add beanch using  {git branch "name" } and checkout that name to let the changes occur to it not to the master it  is like context switching i always have master branch that u want to keep it organized and full working and sometimes u need to have devlopment branch that ur that active work taking place on ur project  or experimental brnach that u expext it to break or crush and keep things organixed when working with others

How do the diagrams help you visualize the branch structure?
it helps alot to visualize the whole project where it is going and where it branched also to keep master branch together 
using git log --graph --oneline master branch1 branch 2 let me visualize the graph 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do? 
the result is adding new things that wasnt existing b4 in the master branch and they both now will be shown as they r one branch though we still show it in the diagram we di cause they merged in time stamp but still GIT knows each commit has its own parent in its old branch 

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
automatic merging is cool and provide us alot of comfort and less time and if there is conflicts it will refer that to us to easily remove the conflicts in the other case manual merging will take time and may have alot of errors
